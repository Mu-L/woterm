cmake_minimum_required(VERSION 3.1)

project(wotermall)

message("CMAKE_EXTRA_GENERATOR_C_SYSTEM_INCLUDE_DIRS:${CMAKE_EXTRA_GENERATOR_C_SYSTEM_INCLUDE_DIRS}")
message("CMAKE_EXTRA_GENERATOR_CXX_SYSTEM_INCLUDE_DIRS:${CMAKE_EXTRA_GENERATOR_CXX_SYSTEM_INCLUDE_DIRS}")
message("CMAKE_RC_COMPILER:${CMAKE_RC_COMPILER}")
message("CMAKE_MT:${CMAKE_MT}")


SET(CMAKE_EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_EXECUTABLE_OUTPUT_PATH_DEBUG ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_EXECUTABLE_OUTPUT_PATH_RELEASE ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_PATH_DEBUG ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_PATH_RELEASE ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${PROJECT_SOURCE_DIR}/bin)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/bin)

set(CMAKE_DEBUG_POSTFIX "d")

# build qterm item to a static or shared libarary

set(KXVER_ROOT_DIR ${PROJECT_SOURCE_DIR}/kxver)
set(KXTERM_ROOT_DIR ${PROJECT_SOURCE_DIR}/kxterm)
set(KXVNC_ROOT_DIR ${PROJECT_SOURCE_DIR}/kxvnc)
set(KXFTP_ROOT_DIR ${PROJECT_SOURCE_DIR}/kxftp)
set(KXUTIL_ROOT_DIR ${PROJECT_SOURCE_DIR}/kxutil)

if(WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /utf-8")
    set(OPENSSL_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/openssl/winx)
    set(ZLIB_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/zlib/winx)
    set(LIBSSH_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/libssh/winx)
    set(LIBQSSH_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/qssh/winx)
    set(FREERDP_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/freerdp/winx)
    set(LIBOPENH264_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/openh264/winx)
    set(LIBPORTAUDIO_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/portaudio/winx)
    set(LIBOPUS_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/opus/winx)
    set(LIBJPEG_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/jpeg/winx)
    set(LIBYUV_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/libyuv/winx)
    set(LIBTELNET_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/libtelnet/winx)
    set(LIBMODEM_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/modem/winx)
    set(LIBSQLITE_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/sqlite/winx)
    set(LIBWINPTY_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/winpty/winx)
    set(LIBPTYQT_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/ptyqt/winx)

    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${LIBWINPTY_ROOT_DIR}/bin/winpty.dll)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${LIBWINPTY_ROOT_DIR}/bin/winpty-agent.exe)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${LIBSSH_ROOT_DIR}/bin/*.dll)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${FREERDP_ROOT_DIR}/bin/*.dll)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${OPENSSL_ROOT_DIR}/bin/*.dll)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${LIBPTYQT_ROOT_DIR}/bin/*.dll)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${LIBPTYQT_ROOT_DIR}/bin/*.exe)
else()
    set(OPENSSL_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/openssl/unix)
    set(ZLIB_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/zlib/unix)
    set(LIBSSH_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/libssh/unix)
    set(LIBQSSH_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/qssh/unix)
    set(FREERDP_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/freerdp/unix)
    set(LIBOPENH264_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/openh264/unix)
    set(LIBPORTAUDIO_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/portaudio/unix)
    set(LIBOPUS_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/opus/unix)
    set(LIBJPEG_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/jpeg/unix)
    set(LIBYUV_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/libyuv/unix)
    set(LIBTELNET_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/libtelnet/unix)
    set(LIBMODEM_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/modem/unix)
    set(LIBSQLITE_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/sqlite/unix)
    set(LIBWINPTY_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/winpty/unix)
    set(LIBPTYQT_ROOT_DIR ${PROJECT_SOURCE_DIR}/third/ptyqt/unix)

    file(GLOB MY_COPY_FILES ${LIBSSH_ROOT_DIR}/lib/libssh.*)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${FREERDP_ROOT_DIR}/lib/librdp.*)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${OPENSSL_ROOT_DIR}/lib/lib*.dylib)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${OPENSSL_ROOT_DIR}/lib/lib*.so*)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${LIBPTYQT_ROOT_DIR}/bin/lib*.so*)
    file(GLOB MY_COPY_FILES ${MY_COPY_FILES} ${LIBPTYQT_ROOT_DIR}/bin/lib*.dylib)
endif()
file(COPY ${MY_COPY_FILES} DESTINATION ${PROJECT_SOURCE_DIR}/bin)

message("copy file list:${MY_COPY_FILES}")
message("root path:${PROJECT_SOURCE_DIR}")

add_subdirectory(kxver)
add_subdirectory(kxterm)
add_subdirectory(kxvnc)
add_subdirectory(kxutil)
add_subdirectory(kxftp)
add_subdirectory(woterm)



